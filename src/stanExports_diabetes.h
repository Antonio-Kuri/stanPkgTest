// Generated by rstantools.  Do not edit by hand.

/*
    stanPkgTest is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanPkgTest is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanPkgTest.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_diabetes_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_diabetes");
    reader.add_event(826, 824, "end", "model_diabetes");
    return reader;
}
template <typename T0__, typename T1__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__>::type
ro_rng(const T0__& mu,
           const T1__& sigma, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        local_scalar_t__ p(DUMMY_VAR__);
        (void) p;  // dummy to suppress unused var warning
        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p, DUMMY_VAR__);
        stan::math::assign(p,normal_cdf(0, mu, sigma));
        current_statement_begin__ = 4;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p, 1, base_rng__));
        current_statement_begin__ = 5;
        local_scalar_t__ z(DUMMY_VAR__);
        (void) z;  // dummy to suppress unused var warning
        stan::math::initialize(z, DUMMY_VAR__);
        stan::math::fill(z, DUMMY_VAR__);
        stan::math::assign(z,inv_Phi(u));
        current_statement_begin__ = 6;
        local_scalar_t__ y(DUMMY_VAR__);
        (void) y;  // dummy to suppress unused var warning
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,(mu + (sigma * z)));
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ro_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& mu,
           const T1__& sigma, RNG& base_rng__, std::ostream* pstream__) const {
        return ro_rng(mu, sigma, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
simCHF(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& bmi,
           const T5__& ldl,
           const T6__& amp,
           const T7__& ulcer,
           const T8__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 12;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 13;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 14;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 15;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 17;
        stan::math::assign(temp, update);
        current_statement_begin__ = 18;
        stan::math::assign(predictor, (((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + (ldl * get_base1(temp, 8, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))) + (ulcer * get_base1(temp, 15, "temp", 1))));
        current_statement_begin__ = 19;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 20;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 21;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 22;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 23;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(19), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 24;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(24), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simCHF_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& bmi,
           const T5__& ldl,
           const T6__& amp,
           const T7__& ulcer,
           const T8__& rand, std::ostream* pstream__) const {
        return simCHF(update, intercept, ro, age_diab, bmi, ldl, amp, ulcer, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
simIHD(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& ldl,
           const T5__& amp,
           const T6__& efgr,
           const T7__& pvd,
           const T8__& chf,
           const T9__& sbp,
           const T10__& hdl,
           const T11__& female,
           const T12__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 31;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 32;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 33;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 34;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 36;
        stan::math::assign(temp, update);
        current_statement_begin__ = 37;
        stan::math::assign(predictor, (((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (ldl * get_base1(temp, 8, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))) + (chf * get_base1(temp, 19, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (hdl * get_base1(temp, 9, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))) + (efgr * get_base1(temp, 33, "temp", 1))) + (pvd * get_base1(temp, 32, "temp", 1))));
        current_statement_begin__ = 39;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 40;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 41;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 42;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 43;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(18), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 44;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simIHD_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& age_diab,
           const T4__& ldl,
           const T5__& amp,
           const T6__& efgr,
           const T7__& pvd,
           const T8__& chf,
           const T9__& sbp,
           const T10__& hdl,
           const T11__& female,
           const T12__& rand, std::ostream* pstream__) const {
        return simIHD(update, intercept, ro, age_diab, ldl, amp, efgr, pvd, chf, sbp, hdl, female, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
simMIm(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& hb1ac,
           const T3__& age_diab,
           const T4__& ldl,
           const T5__& amp,
           const T6__& chf,
           const T7__& sbp,
           const T8__& hdl,
           const T9__& smoker,
           const T10__& ihd,
           const T11__& stroke,
           const T12__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 51;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 52;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 53;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 54;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 56;
        stan::math::assign(temp, update);
        current_statement_begin__ = 57;
        stan::math::assign(predictor, ((((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (ldl * get_base1(temp, 8, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))) + (chf * get_base1(temp, 19, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (hdl * get_base1(temp, 9, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))) + (ihd * get_base1(temp, 18, "temp", 1))) + (stroke * get_base1(temp, 17, "temp", 1))));
        current_statement_begin__ = 59;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 60;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 61;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 62;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 63;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 64;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 66;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMIm_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& hb1ac,
           const T3__& age_diab,
           const T4__& ldl,
           const T5__& amp,
           const T6__& chf,
           const T7__& sbp,
           const T8__& hdl,
           const T9__& smoker,
           const T10__& ihd,
           const T11__& stroke,
           const T12__& rand, std::ostream* pstream__) const {
        return simMIm(update, intercept, hb1ac, age_diab, ldl, amp, chf, sbp, hdl, smoker, ihd, stroke, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
simMIf(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& hb1ac,
           const T4__& age_diab,
           const T5__& ldl,
           const T6__& chf,
           const T7__& sbp,
           const T8__& smoker,
           const T9__& ihd,
           const T10__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 70;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 71;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 72;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 73;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 74;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 76;
        stan::math::assign(temp, update);
        current_statement_begin__ = 77;
        stan::math::assign(predictor, (((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (ldl * (logical_gt(get_base1(temp, 8, "temp", 1), 35) ? 1 : 0 ))) + (chf * get_base1(temp, 19, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))) + (ihd * get_base1(temp, 18, "temp", 1))));
        current_statement_begin__ = 79;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 80;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 81;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 82;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 83;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 84;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMIf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ro,
           const T3__& hb1ac,
           const T4__& age_diab,
           const T5__& ldl,
           const T6__& chf,
           const T7__& sbp,
           const T8__& smoker,
           const T9__& ihd,
           const T10__& rand, std::ostream* pstream__) const {
        return simMIf(update, intercept, ro, hb1ac, age_diab, ldl, chf, sbp, smoker, ihd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
simMI2(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ldl,
           const T3__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 89;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 90;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 91;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 92;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 93;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 95;
        stan::math::assign(temp, update);
        current_statement_begin__ = 96;
        stan::math::assign(predictor, (intercept + (ldl * get_base1(temp, 8, "temp", 1))));
        current_statement_begin__ = 97;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 98;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 99;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 100;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 101;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 102;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 104;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simMI2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const std::vector<T0__>& update,
           const T1__& intercept,
           const T2__& ldl,
           const T3__& rand, std::ostream* pstream__) const {
        return simMI2(update, intercept, ldl, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type>
simStroke(const std::vector<T0__>& update,
              const T1__& intercept,
              const T2__& ro,
              const T3__& hb1ac,
              const T4__& age_diab,
              const T5__& ldl,
              const T6__& sbp,
              const T7__& smoker,
              const T8__& ihd,
              const T9__& female,
              const T10__& amp,
              const T11__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 108;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 109;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 110;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 111;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 112;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 114;
        stan::math::assign(temp, update);
        current_statement_begin__ = 115;
        stan::math::assign(predictor, ((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (ldl * get_base1(temp, 8, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))) + (ihd * get_base1(temp, 18, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))));
        current_statement_begin__ = 117;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 118;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 119;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 120;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 121;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 122;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 124;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simStroke_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
              const T1__& intercept,
              const T2__& ro,
              const T3__& hb1ac,
              const T4__& age_diab,
              const T5__& ldl,
              const T6__& sbp,
              const T7__& smoker,
              const T8__& ihd,
              const T9__& female,
              const T10__& amp,
              const T11__& rand, std::ostream* pstream__) const {
        return simStroke(update, intercept, ro, hb1ac, age_diab, ldl, sbp, smoker, ihd, female, amp, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
simStroke2(const std::vector<T0__>& update,
               const T1__& intercept,
               const T2__& ro,
               const T3__& age_diab,
               const T4__& smoker,
               const T5__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 127;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 128;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 129;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 130;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 131;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 133;
        stan::math::assign(temp, update);
        current_statement_begin__ = 134;
        stan::math::assign(predictor, ((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))));
        current_statement_begin__ = 135;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 136;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 137;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 138;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 139;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 140;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 142;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simStroke2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
    operator()(const std::vector<T0__>& update,
               const T1__& intercept,
               const T2__& ro,
               const T3__& age_diab,
               const T4__& smoker,
               const T5__& rand, std::ostream* pstream__) const {
        return simStroke2(update, intercept, ro, age_diab, smoker, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type>
simBlind(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& hb1ac,
             const T4__& sbp,
             const T5__& chf,
             const T6__& ihd,
             const T7__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 146;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 147;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 148;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 149;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 150;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 152;
        stan::math::assign(temp, update);
        current_statement_begin__ = 153;
        stan::math::assign(predictor, (((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (chf * get_base1(temp, 19, "temp", 1))) + (ihd * get_base1(temp, 18, "temp", 1))));
        current_statement_begin__ = 155;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 156;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 157;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 158;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 159;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(20), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 160;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(28), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 162;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simBlind_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& hb1ac,
             const T4__& sbp,
             const T5__& chf,
             const T6__& ihd,
             const T7__& rand, std::ostream* pstream__) const {
        return simBlind(update, intercept, age_diab, hb1ac, sbp, chf, ihd, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type>
simUlcer(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& hb1ac,
             const T6__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 166;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 167;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 168;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 169;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 171;
        stan::math::assign(temp, update);
        current_statement_begin__ = 172;
        stan::math::assign(predictor, ((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))));
        current_statement_begin__ = 174;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 175;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 176;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 177;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                        (stan::model::rvalue(temp, stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), "temp") + 1), 
                        "assigning variable temp");
            current_statement_begin__ = 178;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(29), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 180;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simUlcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& hb1ac,
             const T6__& rand, std::ostream* pstream__) const {
        return simUlcer(update, intercept, age_diab, female, bmi, hb1ac, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type>
simAmp_noUlcer(const std::vector<T0__>& update,
                   const T1__& intercept,
                   const T2__& ro,
                   const T3__& hb1ac,
                   const T4__& age_diab,
                   const T5__& hdl,
                   const T6__& sbp,
                   const T7__& stroke,
                   const T8__& female,
                   const T9__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 184;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 185;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 186;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 187;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 188;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 190;
        stan::math::assign(temp, update);
        current_statement_begin__ = 191;
        stan::math::assign(predictor, ((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (hdl * get_base1(temp, 9, "temp", 1))) + (sbp * get_base1(temp, 14, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))) + (hb1ac * get_base1(temp, 7, "temp", 1))) + (stroke * get_base1(temp, 17, "temp", 1))));
        current_statement_begin__ = 193;
        stan::math::assign(H1, (stan::math::exp(predictor) * pow(get_base1(temp, 12, "temp", 1), ro)));
        current_statement_begin__ = 194;
        stan::math::assign(H2, (stan::math::exp(predictor) * pow((get_base1(temp, 12, "temp", 1) + 1), ro)));
        current_statement_begin__ = 195;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 196;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 197;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 198;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 200;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp_noUlcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                   const T1__& intercept,
                   const T2__& ro,
                   const T3__& hb1ac,
                   const T4__& age_diab,
                   const T5__& hdl,
                   const T6__& sbp,
                   const T7__& stroke,
                   const T8__& female,
                   const T9__& rand, std::ostream* pstream__) const {
        return simAmp_noUlcer(update, intercept, ro, hb1ac, age_diab, hdl, sbp, stroke, female, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
simAmp_Ulcer(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age_diab,
                 const T3__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 203;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 204;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 205;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 206;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 207;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 209;
        stan::math::assign(temp, update);
        current_statement_begin__ = 210;
        stan::math::assign(predictor, (intercept + (age_diab * get_base1(temp, 2, "temp", 1))));
        current_statement_begin__ = 211;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 212;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 213;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 214;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 215;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 216;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 218;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp_Ulcer_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age_diab,
                 const T3__& rand, std::ostream* pstream__) const {
        return simAmp_Ulcer(update, intercept, age_diab, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
simAmp2(const std::vector<T0__>& update,
            const T1__& intercept,
            const T2__& hb1ac,
            const T3__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 221;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 222;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 223;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 224;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 225;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 227;
        stan::math::assign(temp, update);
        current_statement_begin__ = 228;
        stan::math::assign(predictor, (intercept + (hb1ac * get_base1(temp, 7, "temp", 1))));
        current_statement_begin__ = 229;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 230;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 231;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 232;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 233;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        2, 
                        "assigning variable temp");
            current_statement_begin__ = 234;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 236;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simAmp2_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const std::vector<T0__>& update,
            const T1__& intercept,
            const T2__& hb1ac,
            const T3__& rand, std::ostream* pstream__) const {
        return simAmp2(update, intercept, hb1ac, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
simRenal(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& ldl,
             const T6__& sbp,
             const T7__& amp,
             const T8__& efgr,
             const T9__& blind,
             const T10__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 240;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 241;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 242;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 243;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 244;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 246;
        stan::math::assign(temp, update);
        current_statement_begin__ = 247;
        stan::math::assign(predictor, ((((((((intercept + (age_diab * get_base1(temp, 2, "temp", 1))) + (bmi * get_base1(temp, 13, "temp", 1))) + (ldl * get_base1(temp, 8, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))) + (blind * get_base1(temp, 20, "temp", 1))) + (female * get_base1(temp, 3, "temp", 1))) + (sbp * get_base1(temp, 6, "temp", 1))) + (efgr * get_base1(temp, 33, "temp", 1))));
        current_statement_begin__ = 249;
        stan::math::assign(H1, (stan::math::exp(predictor) * get_base1(temp, 12, "temp", 1)));
        current_statement_begin__ = 250;
        stan::math::assign(H2, (stan::math::exp(predictor) * (get_base1(temp, 12, "temp", 1) + 1)));
        current_statement_begin__ = 251;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 252;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 253;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(22), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
            current_statement_begin__ = 254;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(31), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 256;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simRenal_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
             const T1__& intercept,
             const T2__& age_diab,
             const T3__& female,
             const T4__& bmi,
             const T5__& ldl,
             const T6__& sbp,
             const T7__& amp,
             const T8__& efgr,
             const T9__& blind,
             const T10__& rand, std::ostream* pstream__) const {
        return simRenal(update, intercept, age_diab, female, bmi, ldl, sbp, amp, efgr, blind, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
simDeath_nohist(const std::vector<T0__>& update,
                    const T1__& intercept,
                    const T2__& phi,
                    const T3__& female,
                    const T4__& smoker,
                    const T5__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 259;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 260;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 261;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 262;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 263;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 265;
        stan::math::assign(temp, update);
        current_statement_begin__ = 266;
        stan::math::assign(predictor, ((intercept + (female * get_base1(temp, 3, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))));
        current_statement_begin__ = 267;
        stan::math::assign(H1, ((stan::math::exp(predictor) * (stan::math::exp((phi * get_base1(temp, 1, "temp", 1))) - 1)) / phi));
        current_statement_begin__ = 268;
        stan::math::assign(H2, ((stan::math::exp(predictor) * (stan::math::exp((phi * (get_base1(temp, 1, "temp", 1) + 1))) - 1)) / phi));
        current_statement_begin__ = 269;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 270;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 271;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 273;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_nohist_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type>
    operator()(const std::vector<T0__>& update,
                    const T1__& intercept,
                    const T2__& phi,
                    const T3__& female,
                    const T4__& smoker,
                    const T5__& rand, std::ostream* pstream__) const {
        return simDeath_nohist(update, intercept, phi, female, smoker, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
simDeath1st(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& year,
                const T3__& age,
                const T4__& smoker,
                const T5__& amp_event,
                const T6__& ihd_event,
                const T7__& mi_event,
                const T8__& renal_event,
                const T9__& stroke_event,
                const T10__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 277;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 278;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 279;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 280;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 282;
        stan::math::assign(temp, update);
        current_statement_begin__ = 283;
        stan::math::assign(predictor, ((((((((intercept + (year * get_base1(temp, 12, "temp", 1))) + (age * get_base1(temp, 1, "temp", 1))) + (smoker * get_base1(temp, 5, "temp", 1))) + (amp_event * get_base1(temp, 30, "temp", 1))) + (ihd_event * get_base1(temp, 25, "temp", 1))) + (mi_event * get_base1(temp, 26, "temp", 1))) + (renal_event * get_base1(temp, 31, "temp", 1))) + (stroke_event * get_base1(temp, 27, "temp", 1))));
        current_statement_begin__ = 285;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 286;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 287;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 288;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 290;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath1st_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                const T1__& intercept,
                const T2__& year,
                const T3__& age,
                const T4__& smoker,
                const T5__& amp_event,
                const T6__& ihd_event,
                const T7__& mi_event,
                const T8__& renal_event,
                const T9__& stroke_event,
                const T10__& rand, std::ostream* pstream__) const {
        return simDeath1st(update, intercept, year, age, smoker, amp_event, ihd_event, mi_event, renal_event, stroke_event, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
simDeath_hist(const std::vector<T0__>& update,
                  const T1__& intercept,
                  const T2__& phi,
                  const T3__& bm1,
                  const T4__& bm2,
                  const T5__& smoker,
                  const T6__& amp,
                  const T7__& chf,
                  const T8__& renal,
                  const T9__& stroke,
                  const T10__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 295;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 296;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 297;
        local_scalar_t__ H2(DUMMY_VAR__);
        (void) H2;  // dummy to suppress unused var warning
        stan::math::initialize(H2, DUMMY_VAR__);
        stan::math::fill(H2, DUMMY_VAR__);
        stan::math::assign(H2,H1);
        current_statement_begin__ = 298;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 299;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 301;
        stan::math::assign(temp, update);
        current_statement_begin__ = 302;
        stan::math::assign(predictor, (((((((intercept + (bm1 * (logical_lt(get_base1(temp, 13, "temp", 1), 18.5) ? 1 : 0 ))) + (bm2 * (logical_gt(get_base1(temp, 13, "temp", 1), 25) ? 1 : 0 ))) + (smoker * get_base1(temp, 5, "temp", 1))) + (amp * get_base1(temp, 21, "temp", 1))) + (chf * get_base1(temp, 19, "temp", 1))) + (renal * get_base1(temp, 22, "temp", 1))) + (stroke * get_base1(temp, 17, "temp", 1))));
        current_statement_begin__ = 304;
        stan::math::assign(H1, ((stan::math::exp(predictor) * (stan::math::exp((phi * get_base1(temp, 1, "temp", 1))) - 1)) / phi));
        current_statement_begin__ = 305;
        stan::math::assign(H2, ((stan::math::exp(predictor) * (stan::math::exp((phi * (get_base1(temp, 1, "temp", 1) + 1))) - 1)) / phi));
        current_statement_begin__ = 306;
        stan::math::assign(prob, (1 - stan::math::exp((H1 - H2))));
        current_statement_begin__ = 307;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 308;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 310;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_hist_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                  const T1__& intercept,
                  const T2__& phi,
                  const T3__& bm1,
                  const T4__& bm2,
                  const T5__& smoker,
                  const T6__& amp,
                  const T7__& chf,
                  const T8__& renal,
                  const T9__& stroke,
                  const T10__& rand, std::ostream* pstream__) const {
        return simDeath_hist(update, intercept, phi, bm1, bm2, smoker, amp, chf, renal, stroke, rand, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type>
simDeath_sub(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age,
                 const T3__& hdl,
                 const T4__& amp_event,
                 const T5__& amp,
                 const T6__& amp_event2,
                 const T7__& ihd_event,
                 const T8__& ihd,
                 const T9__& mi_event,
                 const T10__& mi,
                 const T11__& renal,
                 const T12__& stroke_event,
                 const T13__& rand, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 314;
        local_scalar_t__ predictor(DUMMY_VAR__);
        (void) predictor;  // dummy to suppress unused var warning
        stan::math::initialize(predictor, DUMMY_VAR__);
        stan::math::fill(predictor, DUMMY_VAR__);
        current_statement_begin__ = 315;
        local_scalar_t__ H1(DUMMY_VAR__);
        (void) H1;  // dummy to suppress unused var warning
        stan::math::initialize(H1, DUMMY_VAR__);
        stan::math::fill(H1, DUMMY_VAR__);
        current_statement_begin__ = 316;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 317;
        validate_non_negative_index("temp", "size(update)", size(update));
        std::vector<local_scalar_t__  > temp(size(update), local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 319;
        stan::math::assign(temp, update);
        current_statement_begin__ = 320;
        stan::math::assign(predictor, ((((((((((intercept + (age * get_base1(temp, 1, "temp", 1))) + (hdl * get_base1(temp, 9, "temp", 1))) + (amp_event * (logical_eq(get_base1(temp, 30, "temp", 1), 1) ? 1 : 0 ))) + (amp_event2 * (logical_eq(get_base1(temp, 21, "temp", 1), 2) ? 1 : 0 ))) + (amp * (logical_eq(get_base1(temp, 21, "temp", 1), 1) ? 1 : 0 ))) + (ihd * get_base1(temp, 18, "temp", 1))) + (mi_event * get_base1(temp, 26, "temp", 1))) + (mi * get_base1(temp, 16, "temp", 1))) + (renal * get_base1(temp, 22, "temp", 1))) + (stroke_event * get_base1(temp, 27, "temp", 1))));
        current_statement_begin__ = 322;
        stan::math::assign(H1, (stan::math::exp(-(predictor)) / (1 + stan::math::exp(-(predictor)))));
        current_statement_begin__ = 323;
        stan::math::assign(prob, (1 - H1));
        current_statement_begin__ = 324;
        if (as_bool(logical_gt(prob, rand))) {
            current_statement_begin__ = 325;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable temp");
        }
        current_statement_begin__ = 327;
        return stan::math::promote_scalar<fun_return_scalar_t__>(temp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simDeath_sub_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__>::type>::type>::type>::type>
    operator()(const std::vector<T0__>& update,
                 const T1__& intercept,
                 const T2__& age,
                 const T3__& hdl,
                 const T4__& amp_event,
                 const T5__& amp,
                 const T6__& amp_event2,
                 const T7__& ihd_event,
                 const T8__& ihd,
                 const T9__& mi_event,
                 const T10__& mi,
                 const T11__& renal,
                 const T12__& stroke_event,
                 const T13__& rand, std::ostream* pstream__) const {
        return simDeath_sub(update, intercept, age, hdl, amp_event, amp, amp_event2, ihd_event, ihd, mi_event, mi, renal, stroke_event, rand, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_diabetes
  : public stan::model::model_base_crtp<model_diabetes> {
private:
        int complicaciones;
        int time;
        int len_his;
        double ag;
        double age_dia;
        double woma;
        double eth;
        double smok;
        double sb;
        double hba1;
        double ld;
        double hd;
        double weigh;
        double tall;
        double mii;
        double strok;
        double ih;
        double ch;
        double blin;
        double ampu;
        double rena;
        double ulce;
        double pv;
        double efg;
        double hba1c_red1_comp1_mean;
        double hba1c_red1_comp1_se;
        double weight_red1_comp1_mean;
        double weight_red1_comp1_se;
        double sbp_red1_comp1_mean;
        double sbp_red1_comp1_se;
        double ldl_red1_comp1_mean;
        double ldl_red1_comp1_se;
        double hdl_red1_comp1_mean;
        double hdl_red1_comp1_se;
        double t_sbp_red1_comp1_mean;
        double t_sbp_red1_comp1_se;
public:
    model_diabetes(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_diabetes(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_diabetes_namespace::model_diabetes";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 333;
            context__.validate_dims("data initialization", "complicaciones", "int", context__.to_vec());
            complicaciones = int(0);
            vals_i__ = context__.vals_i("complicaciones");
            pos__ = 0;
            complicaciones = vals_i__[pos__++];
            check_greater_or_equal(function__, "complicaciones", complicaciones, 1);
            current_statement_begin__ = 334;
            context__.validate_dims("data initialization", "time", "int", context__.to_vec());
            time = int(0);
            vals_i__ = context__.vals_i("time");
            pos__ = 0;
            time = vals_i__[pos__++];
            check_greater_or_equal(function__, "time", time, 1);
            current_statement_begin__ = 335;
            context__.validate_dims("data initialization", "len_his", "int", context__.to_vec());
            len_his = int(0);
            vals_i__ = context__.vals_i("len_his");
            pos__ = 0;
            len_his = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_his", len_his, 1);
            current_statement_begin__ = 338;
            context__.validate_dims("data initialization", "ag", "double", context__.to_vec());
            ag = double(0);
            vals_r__ = context__.vals_r("ag");
            pos__ = 0;
            ag = vals_r__[pos__++];
            current_statement_begin__ = 339;
            context__.validate_dims("data initialization", "age_dia", "double", context__.to_vec());
            age_dia = double(0);
            vals_r__ = context__.vals_r("age_dia");
            pos__ = 0;
            age_dia = vals_r__[pos__++];
            current_statement_begin__ = 340;
            context__.validate_dims("data initialization", "woma", "double", context__.to_vec());
            woma = double(0);
            vals_r__ = context__.vals_r("woma");
            pos__ = 0;
            woma = vals_r__[pos__++];
            current_statement_begin__ = 341;
            context__.validate_dims("data initialization", "eth", "double", context__.to_vec());
            eth = double(0);
            vals_r__ = context__.vals_r("eth");
            pos__ = 0;
            eth = vals_r__[pos__++];
            current_statement_begin__ = 342;
            context__.validate_dims("data initialization", "smok", "double", context__.to_vec());
            smok = double(0);
            vals_r__ = context__.vals_r("smok");
            pos__ = 0;
            smok = vals_r__[pos__++];
            current_statement_begin__ = 343;
            context__.validate_dims("data initialization", "sb", "double", context__.to_vec());
            sb = double(0);
            vals_r__ = context__.vals_r("sb");
            pos__ = 0;
            sb = vals_r__[pos__++];
            current_statement_begin__ = 344;
            context__.validate_dims("data initialization", "hba1", "double", context__.to_vec());
            hba1 = double(0);
            vals_r__ = context__.vals_r("hba1");
            pos__ = 0;
            hba1 = vals_r__[pos__++];
            current_statement_begin__ = 345;
            context__.validate_dims("data initialization", "ld", "double", context__.to_vec());
            ld = double(0);
            vals_r__ = context__.vals_r("ld");
            pos__ = 0;
            ld = vals_r__[pos__++];
            current_statement_begin__ = 346;
            context__.validate_dims("data initialization", "hd", "double", context__.to_vec());
            hd = double(0);
            vals_r__ = context__.vals_r("hd");
            pos__ = 0;
            hd = vals_r__[pos__++];
            current_statement_begin__ = 347;
            context__.validate_dims("data initialization", "weigh", "double", context__.to_vec());
            weigh = double(0);
            vals_r__ = context__.vals_r("weigh");
            pos__ = 0;
            weigh = vals_r__[pos__++];
            current_statement_begin__ = 348;
            context__.validate_dims("data initialization", "tall", "double", context__.to_vec());
            tall = double(0);
            vals_r__ = context__.vals_r("tall");
            pos__ = 0;
            tall = vals_r__[pos__++];
            current_statement_begin__ = 349;
            context__.validate_dims("data initialization", "mii", "double", context__.to_vec());
            mii = double(0);
            vals_r__ = context__.vals_r("mii");
            pos__ = 0;
            mii = vals_r__[pos__++];
            current_statement_begin__ = 350;
            context__.validate_dims("data initialization", "strok", "double", context__.to_vec());
            strok = double(0);
            vals_r__ = context__.vals_r("strok");
            pos__ = 0;
            strok = vals_r__[pos__++];
            current_statement_begin__ = 351;
            context__.validate_dims("data initialization", "ih", "double", context__.to_vec());
            ih = double(0);
            vals_r__ = context__.vals_r("ih");
            pos__ = 0;
            ih = vals_r__[pos__++];
            current_statement_begin__ = 352;
            context__.validate_dims("data initialization", "ch", "double", context__.to_vec());
            ch = double(0);
            vals_r__ = context__.vals_r("ch");
            pos__ = 0;
            ch = vals_r__[pos__++];
            current_statement_begin__ = 353;
            context__.validate_dims("data initialization", "blin", "double", context__.to_vec());
            blin = double(0);
            vals_r__ = context__.vals_r("blin");
            pos__ = 0;
            blin = vals_r__[pos__++];
            current_statement_begin__ = 354;
            context__.validate_dims("data initialization", "ampu", "double", context__.to_vec());
            ampu = double(0);
            vals_r__ = context__.vals_r("ampu");
            pos__ = 0;
            ampu = vals_r__[pos__++];
            current_statement_begin__ = 355;
            context__.validate_dims("data initialization", "rena", "double", context__.to_vec());
            rena = double(0);
            vals_r__ = context__.vals_r("rena");
            pos__ = 0;
            rena = vals_r__[pos__++];
            current_statement_begin__ = 356;
            context__.validate_dims("data initialization", "ulce", "double", context__.to_vec());
            ulce = double(0);
            vals_r__ = context__.vals_r("ulce");
            pos__ = 0;
            ulce = vals_r__[pos__++];
            current_statement_begin__ = 357;
            context__.validate_dims("data initialization", "pv", "double", context__.to_vec());
            pv = double(0);
            vals_r__ = context__.vals_r("pv");
            pos__ = 0;
            pv = vals_r__[pos__++];
            current_statement_begin__ = 358;
            context__.validate_dims("data initialization", "efg", "double", context__.to_vec());
            efg = double(0);
            vals_r__ = context__.vals_r("efg");
            pos__ = 0;
            efg = vals_r__[pos__++];
            current_statement_begin__ = 361;
            context__.validate_dims("data initialization", "hba1c_red1_comp1_mean", "double", context__.to_vec());
            hba1c_red1_comp1_mean = double(0);
            vals_r__ = context__.vals_r("hba1c_red1_comp1_mean");
            pos__ = 0;
            hba1c_red1_comp1_mean = vals_r__[pos__++];
            current_statement_begin__ = 362;
            context__.validate_dims("data initialization", "hba1c_red1_comp1_se", "double", context__.to_vec());
            hba1c_red1_comp1_se = double(0);
            vals_r__ = context__.vals_r("hba1c_red1_comp1_se");
            pos__ = 0;
            hba1c_red1_comp1_se = vals_r__[pos__++];
            check_greater_or_equal(function__, "hba1c_red1_comp1_se", hba1c_red1_comp1_se, 0);
            current_statement_begin__ = 363;
            context__.validate_dims("data initialization", "weight_red1_comp1_mean", "double", context__.to_vec());
            weight_red1_comp1_mean = double(0);
            vals_r__ = context__.vals_r("weight_red1_comp1_mean");
            pos__ = 0;
            weight_red1_comp1_mean = vals_r__[pos__++];
            current_statement_begin__ = 364;
            context__.validate_dims("data initialization", "weight_red1_comp1_se", "double", context__.to_vec());
            weight_red1_comp1_se = double(0);
            vals_r__ = context__.vals_r("weight_red1_comp1_se");
            pos__ = 0;
            weight_red1_comp1_se = vals_r__[pos__++];
            check_greater_or_equal(function__, "weight_red1_comp1_se", weight_red1_comp1_se, 0);
            current_statement_begin__ = 365;
            context__.validate_dims("data initialization", "sbp_red1_comp1_mean", "double", context__.to_vec());
            sbp_red1_comp1_mean = double(0);
            vals_r__ = context__.vals_r("sbp_red1_comp1_mean");
            pos__ = 0;
            sbp_red1_comp1_mean = vals_r__[pos__++];
            current_statement_begin__ = 366;
            context__.validate_dims("data initialization", "sbp_red1_comp1_se", "double", context__.to_vec());
            sbp_red1_comp1_se = double(0);
            vals_r__ = context__.vals_r("sbp_red1_comp1_se");
            pos__ = 0;
            sbp_red1_comp1_se = vals_r__[pos__++];
            check_greater_or_equal(function__, "sbp_red1_comp1_se", sbp_red1_comp1_se, 0);
            current_statement_begin__ = 367;
            context__.validate_dims("data initialization", "ldl_red1_comp1_mean", "double", context__.to_vec());
            ldl_red1_comp1_mean = double(0);
            vals_r__ = context__.vals_r("ldl_red1_comp1_mean");
            pos__ = 0;
            ldl_red1_comp1_mean = vals_r__[pos__++];
            current_statement_begin__ = 368;
            context__.validate_dims("data initialization", "ldl_red1_comp1_se", "double", context__.to_vec());
            ldl_red1_comp1_se = double(0);
            vals_r__ = context__.vals_r("ldl_red1_comp1_se");
            pos__ = 0;
            ldl_red1_comp1_se = vals_r__[pos__++];
            check_greater_or_equal(function__, "ldl_red1_comp1_se", ldl_red1_comp1_se, 0);
            current_statement_begin__ = 369;
            context__.validate_dims("data initialization", "hdl_red1_comp1_mean", "double", context__.to_vec());
            hdl_red1_comp1_mean = double(0);
            vals_r__ = context__.vals_r("hdl_red1_comp1_mean");
            pos__ = 0;
            hdl_red1_comp1_mean = vals_r__[pos__++];
            current_statement_begin__ = 370;
            context__.validate_dims("data initialization", "hdl_red1_comp1_se", "double", context__.to_vec());
            hdl_red1_comp1_se = double(0);
            vals_r__ = context__.vals_r("hdl_red1_comp1_se");
            pos__ = 0;
            hdl_red1_comp1_se = vals_r__[pos__++];
            check_greater_or_equal(function__, "hdl_red1_comp1_se", hdl_red1_comp1_se, 0);
            // initialize transformed data variables
            current_statement_begin__ = 384;
            t_sbp_red1_comp1_mean = double(0);
            stan::math::fill(t_sbp_red1_comp1_mean, DUMMY_VAR__);
            current_statement_begin__ = 385;
            t_sbp_red1_comp1_se = double(0);
            stan::math::fill(t_sbp_red1_comp1_se, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 388;
            stan::math::assign(t_sbp_red1_comp1_mean, (sbp_red1_comp1_mean / 10));
            current_statement_begin__ = 389;
            stan::math::assign(t_sbp_red1_comp1_se, (sbp_red1_comp1_se / 100));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_diabetes() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mat_temp");
        names__.push_back("order");
        names__.push_back("theta");
        names__.push_back("history");
        names__.push_back("update");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(time);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(complicaciones);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(complicaciones);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_his);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_diabetes_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 397;
            validate_non_negative_index("mat_temp", "time", time);
            validate_non_negative_index("mat_temp", "len_his", len_his);
            std::vector<std::vector<double> > mat_temp(time, std::vector<double>(len_his, double(0)));
            stan::math::initialize(mat_temp, DUMMY_VAR__);
            stan::math::fill(mat_temp, DUMMY_VAR__);
            current_statement_begin__ = 398;
            validate_non_negative_index("order", "complicaciones", complicaciones);
            std::vector<int> order(complicaciones, int(0));
            stan::math::fill(order, std::numeric_limits<int>::min());
            stan::math::assign(order,static_cast<std::vector<int> >(stan::math::array_builder<int >().add(1).add(2).add(3).add(4).add(5).add(6).add(7).add(8).array()));
            current_statement_begin__ = 399;
            validate_non_negative_index("theta", "complicaciones", complicaciones);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(complicaciones);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,transpose(stan::math::to_row_vector(stan::math::array_builder<double >().add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).add(0.125).array())));
            current_statement_begin__ = 400;
            validate_non_negative_index("history", "len_his", len_his);
            std::vector<double> history(len_his, double(0));
            stan::math::initialize(history, DUMMY_VAR__);
            stan::math::fill(history, DUMMY_VAR__);
            current_statement_begin__ = 401;
            validate_non_negative_index("update", "len_his", len_his);
            std::vector<double> update(len_his, double(0));
            stan::math::initialize(update, DUMMY_VAR__);
            stan::math::fill(update, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        ag, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        age_dia, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        woma, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        eth, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        smok, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                        sb, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                        hba1, 
                        "assigning variable history");
            current_statement_begin__ = 402;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                        ld, 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                        hd, 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                        weigh, 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(11), stan::model::nil_index_list()), 
                        tall, 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(12), stan::model::nil_index_list()), 
                        (ag - age_dia), 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(13), stan::model::nil_index_list()), 
                        (weigh / pow(tall, 2)), 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list()), 
                        (sb / 10), 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(15), stan::model::nil_index_list()), 
                        ulce, 
                        "assigning variable history");
            current_statement_begin__ = 403;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(16), stan::model::nil_index_list()), 
                        mii, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(17), stan::model::nil_index_list()), 
                        strok, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(18), stan::model::nil_index_list()), 
                        ih, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(19), stan::model::nil_index_list()), 
                        ch, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(20), stan::model::nil_index_list()), 
                        blin, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(21), stan::model::nil_index_list()), 
                        ampu, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(22), stan::model::nil_index_list()), 
                        rena, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(23), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable history");
            current_statement_begin__ = 404;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(24), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(28), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(29), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(31), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(32), stan::model::nil_index_list()), 
                        pv, 
                        "assigning variable history");
            current_statement_begin__ = 405;
            stan::model::assign(history, 
                        stan::model::cons_list(stan::model::index_uni(33), stan::model::nil_index_list()), 
                        efg, 
                        "assigning variable history");
            current_statement_begin__ = 407;
            stan::math::assign(update, history);
            current_statement_begin__ = 409;
            for (int i = 1; i <= time; ++i) {
                {
                current_statement_begin__ = 410;
                local_scalar_t__ primera(DUMMY_VAR__);
                (void) primera;  // dummy to suppress unused var warning
                stan::math::initialize(primera, DUMMY_VAR__);
                stan::math::fill(primera, DUMMY_VAR__);
                stan::math::assign(primera,0);
                current_statement_begin__ = 411;
                if (as_bool(logical_eq(get_base1(update, 23, "update", 1), 0))) {
                    current_statement_begin__ = 411;
                    break;
                }
                current_statement_begin__ = 412;
                for (int j = 1; j <= complicaciones; ++j) {
                    {
                    current_statement_begin__ = 413;
                    int temp(0);
                    (void) temp;  // dummy to suppress unused var warning
                    stan::math::fill(temp, std::numeric_limits<int>::min());
                    current_statement_begin__ = 414;
                    int k(0);
                    (void) k;  // dummy to suppress unused var warning
                    stan::math::fill(k, std::numeric_limits<int>::min());
                    current_statement_begin__ = 415;
                    stan::math::assign(k, categorical_rng(theta, base_rng__));
                    current_statement_begin__ = 416;
                    stan::math::assign(temp, get_base1(order, j, "order", 1));
                    current_statement_begin__ = 417;
                    stan::model::assign(order, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                get_base1(order, k, "order", 1), 
                                "assigning variable order");
                    current_statement_begin__ = 418;
                    stan::model::assign(order, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                temp, 
                                "assigning variable order");
                    }
                }
                current_statement_begin__ = 420;
                for (int s = 1; s <= complicaciones; ++s) {
                    current_statement_begin__ = 422;
                    if (as_bool(logical_eq(get_base1(order, s, "order", 1), 1))) {
                        current_statement_begin__ = 423;
                        if (as_bool(logical_neq(get_base1(update, 19, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 424;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 425;
                            local_scalar_t__ ro(DUMMY_VAR__);
                            (void) ro;  // dummy to suppress unused var warning
                            stan::math::initialize(ro, DUMMY_VAR__);
                            stan::math::fill(ro, DUMMY_VAR__);
                            current_statement_begin__ = 426;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 427;
                            local_scalar_t__ bmi(DUMMY_VAR__);
                            (void) bmi;  // dummy to suppress unused var warning
                            stan::math::initialize(bmi, DUMMY_VAR__);
                            stan::math::fill(bmi, DUMMY_VAR__);
                            current_statement_begin__ = 428;
                            local_scalar_t__ ldl(DUMMY_VAR__);
                            (void) ldl;  // dummy to suppress unused var warning
                            stan::math::initialize(ldl, DUMMY_VAR__);
                            stan::math::fill(ldl, DUMMY_VAR__);
                            current_statement_begin__ = 429;
                            local_scalar_t__ amp(DUMMY_VAR__);
                            (void) amp;  // dummy to suppress unused var warning
                            stan::math::initialize(amp, DUMMY_VAR__);
                            stan::math::fill(amp, DUMMY_VAR__);
                            current_statement_begin__ = 430;
                            local_scalar_t__ ulcer(DUMMY_VAR__);
                            (void) ulcer;  // dummy to suppress unused var warning
                            stan::math::initialize(ulcer, DUMMY_VAR__);
                            stan::math::fill(ulcer, DUMMY_VAR__);
                            current_statement_begin__ = 431;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 432;
                            stan::math::assign(intercept, normal_rng(-(12.332), 0.859, base_rng__));
                            current_statement_begin__ = 433;
                            stan::math::assign(ro, ro_rng(1.514, 0.096, base_rng__, pstream__));
                            current_statement_begin__ = 434;
                            stan::math::assign(age_diab, normal_rng(0.068, 0.008, base_rng__));
                            current_statement_begin__ = 435;
                            stan::math::assign(bmi, normal_rng(0.072, 0.008, base_rng__));
                            current_statement_begin__ = 436;
                            stan::math::assign(ldl, normal_rng(0.012, 0.005, base_rng__));
                            current_statement_begin__ = 437;
                            stan::math::assign(amp, normal_rng(0.658, 0.334, base_rng__));
                            current_statement_begin__ = 438;
                            stan::math::assign(ulcer, normal_rng(0.654, 0.291, base_rng__));
                            current_statement_begin__ = 439;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 440;
                            stan::math::assign(update, simCHF(update, intercept, ro, age_diab, bmi, ldl, amp, ulcer, rand, pstream__));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 2))) {
                        current_statement_begin__ = 445;
                        if (as_bool(logical_neq(get_base1(update, 18, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 446;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 447;
                            local_scalar_t__ ro(DUMMY_VAR__);
                            (void) ro;  // dummy to suppress unused var warning
                            stan::math::initialize(ro, DUMMY_VAR__);
                            stan::math::fill(ro, DUMMY_VAR__);
                            current_statement_begin__ = 448;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 449;
                            local_scalar_t__ chf(DUMMY_VAR__);
                            (void) chf;  // dummy to suppress unused var warning
                            stan::math::initialize(chf, DUMMY_VAR__);
                            stan::math::fill(chf, DUMMY_VAR__);
                            current_statement_begin__ = 450;
                            local_scalar_t__ ldl(DUMMY_VAR__);
                            (void) ldl;  // dummy to suppress unused var warning
                            stan::math::initialize(ldl, DUMMY_VAR__);
                            stan::math::fill(ldl, DUMMY_VAR__);
                            current_statement_begin__ = 451;
                            local_scalar_t__ amp(DUMMY_VAR__);
                            (void) amp;  // dummy to suppress unused var warning
                            stan::math::initialize(amp, DUMMY_VAR__);
                            stan::math::fill(amp, DUMMY_VAR__);
                            current_statement_begin__ = 452;
                            local_scalar_t__ sbp(DUMMY_VAR__);
                            (void) sbp;  // dummy to suppress unused var warning
                            stan::math::initialize(sbp, DUMMY_VAR__);
                            stan::math::fill(sbp, DUMMY_VAR__);
                            current_statement_begin__ = 453;
                            local_scalar_t__ hdl(DUMMY_VAR__);
                            (void) hdl;  // dummy to suppress unused var warning
                            stan::math::initialize(hdl, DUMMY_VAR__);
                            stan::math::fill(hdl, DUMMY_VAR__);
                            current_statement_begin__ = 454;
                            local_scalar_t__ female(DUMMY_VAR__);
                            (void) female;  // dummy to suppress unused var warning
                            stan::math::initialize(female, DUMMY_VAR__);
                            stan::math::fill(female, DUMMY_VAR__);
                            current_statement_begin__ = 455;
                            local_scalar_t__ efgr(DUMMY_VAR__);
                            (void) efgr;  // dummy to suppress unused var warning
                            stan::math::initialize(efgr, DUMMY_VAR__);
                            stan::math::fill(efgr, DUMMY_VAR__);
                            current_statement_begin__ = 456;
                            local_scalar_t__ pvd(DUMMY_VAR__);
                            (void) pvd;  // dummy to suppress unused var warning
                            stan::math::initialize(pvd, DUMMY_VAR__);
                            stan::math::fill(pvd, DUMMY_VAR__);
                            current_statement_begin__ = 457;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 458;
                            stan::math::assign(intercept, normal_rng(-(6.709), 0.503, base_rng__));
                            current_statement_begin__ = 459;
                            stan::math::assign(ro, ro_rng(1.276, 0.059, base_rng__, pstream__));
                            current_statement_begin__ = 460;
                            stan::math::assign(age_diab, normal_rng(0.016, 0.005, base_rng__));
                            current_statement_begin__ = 461;
                            stan::math::assign(ldl, normal_rng(0.023, 0.003, base_rng__));
                            current_statement_begin__ = 462;
                            stan::math::assign(amp, normal_rng(0.526, 0.266, base_rng__));
                            current_statement_begin__ = 463;
                            stan::math::assign(chf, normal_rng(0.824, 0.168, base_rng__));
                            current_statement_begin__ = 464;
                            stan::math::assign(sbp, normal_rng(0.058, 0.019, base_rng__));
                            current_statement_begin__ = 465;
                            stan::math::assign(hdl, normal_rng(-(0.065), 0.014, base_rng__));
                            current_statement_begin__ = 466;
                            stan::math::assign(female, normal_rng(-(0.532), 0.085, base_rng__));
                            current_statement_begin__ = 467;
                            stan::math::assign(efgr, normal_rng(-(0.053), 0.023, base_rng__));
                            current_statement_begin__ = 468;
                            stan::math::assign(pvd, normal_rng(0.486, 0.181, base_rng__));
                            current_statement_begin__ = 470;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 471;
                            stan::math::assign(update, simIHD(update, intercept, ro, age_diab, chf, ldl, amp, efgr, pvd, sbp, hdl, female, rand, pstream__));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 3))) {
                        current_statement_begin__ = 476;
                        if (as_bool(logical_eq(get_base1(update, 16, "update", 1), 0))) {
                            current_statement_begin__ = 477;
                            if (as_bool(logical_eq(get_base1(update, 3, "update", 1), 0))) {
                                {
                                current_statement_begin__ = 478;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 479;
                                local_scalar_t__ age_diab(DUMMY_VAR__);
                                (void) age_diab;  // dummy to suppress unused var warning
                                stan::math::initialize(age_diab, DUMMY_VAR__);
                                stan::math::fill(age_diab, DUMMY_VAR__);
                                current_statement_begin__ = 480;
                                local_scalar_t__ chf(DUMMY_VAR__);
                                (void) chf;  // dummy to suppress unused var warning
                                stan::math::initialize(chf, DUMMY_VAR__);
                                stan::math::fill(chf, DUMMY_VAR__);
                                current_statement_begin__ = 481;
                                local_scalar_t__ ldl(DUMMY_VAR__);
                                (void) ldl;  // dummy to suppress unused var warning
                                stan::math::initialize(ldl, DUMMY_VAR__);
                                stan::math::fill(ldl, DUMMY_VAR__);
                                current_statement_begin__ = 482;
                                local_scalar_t__ amp(DUMMY_VAR__);
                                (void) amp;  // dummy to suppress unused var warning
                                stan::math::initialize(amp, DUMMY_VAR__);
                                stan::math::fill(amp, DUMMY_VAR__);
                                current_statement_begin__ = 483;
                                local_scalar_t__ hba1c(DUMMY_VAR__);
                                (void) hba1c;  // dummy to suppress unused var warning
                                stan::math::initialize(hba1c, DUMMY_VAR__);
                                stan::math::fill(hba1c, DUMMY_VAR__);
                                current_statement_begin__ = 484;
                                local_scalar_t__ sbp(DUMMY_VAR__);
                                (void) sbp;  // dummy to suppress unused var warning
                                stan::math::initialize(sbp, DUMMY_VAR__);
                                stan::math::fill(sbp, DUMMY_VAR__);
                                current_statement_begin__ = 485;
                                local_scalar_t__ ihd(DUMMY_VAR__);
                                (void) ihd;  // dummy to suppress unused var warning
                                stan::math::initialize(ihd, DUMMY_VAR__);
                                stan::math::fill(ihd, DUMMY_VAR__);
                                current_statement_begin__ = 486;
                                local_scalar_t__ hdl(DUMMY_VAR__);
                                (void) hdl;  // dummy to suppress unused var warning
                                stan::math::initialize(hdl, DUMMY_VAR__);
                                stan::math::fill(hdl, DUMMY_VAR__);
                                current_statement_begin__ = 487;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 488;
                                local_scalar_t__ stroke(DUMMY_VAR__);
                                (void) stroke;  // dummy to suppress unused var warning
                                stan::math::initialize(stroke, DUMMY_VAR__);
                                stan::math::fill(stroke, DUMMY_VAR__);
                                current_statement_begin__ = 489;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 490;
                                stan::math::assign(intercept, normal_rng(-(8.791), 0.486, base_rng__));
                                current_statement_begin__ = 491;
                                stan::math::assign(hba1c, normal_rng(0.108, 0.023, base_rng__));
                                current_statement_begin__ = 492;
                                stan::math::assign(age_diab, normal_rng(0.045, 0.006, base_rng__));
                                current_statement_begin__ = 493;
                                stan::math::assign(ldl, normal_rng(0.023, 0.004, base_rng__));
                                current_statement_begin__ = 494;
                                stan::math::assign(amp, normal_rng(0.743, 0.241, base_rng__));
                                current_statement_begin__ = 495;
                                stan::math::assign(chf, normal_rng(0.814, 0.195, base_rng__));
                                current_statement_begin__ = 496;
                                stan::math::assign(sbp, normal_rng(0.046, 0.022, base_rng__));
                                current_statement_begin__ = 497;
                                stan::math::assign(hdl, normal_rng(-(0.049), 0.016, base_rng__));
                                current_statement_begin__ = 498;
                                stan::math::assign(ihd, normal_rng(0.846, 0.117, base_rng__));
                                current_statement_begin__ = 499;
                                stan::math::assign(smoker, normal_rng(0.277, 0.091, base_rng__));
                                current_statement_begin__ = 500;
                                stan::math::assign(stroke, normal_rng(0.448, 0.173, base_rng__));
                                current_statement_begin__ = 501;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 502;
                                stan::math::assign(update, simMIm(update, intercept, hba1c, age_diab, ldl, amp, chf, sbp, hdl, smoker, ihd, stroke, rand, pstream__));
                                }
                            } else {
                                {
                                current_statement_begin__ = 506;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 507;
                                local_scalar_t__ age_diab(DUMMY_VAR__);
                                (void) age_diab;  // dummy to suppress unused var warning
                                stan::math::initialize(age_diab, DUMMY_VAR__);
                                stan::math::fill(age_diab, DUMMY_VAR__);
                                current_statement_begin__ = 508;
                                local_scalar_t__ chf(DUMMY_VAR__);
                                (void) chf;  // dummy to suppress unused var warning
                                stan::math::initialize(chf, DUMMY_VAR__);
                                stan::math::fill(chf, DUMMY_VAR__);
                                current_statement_begin__ = 509;
                                local_scalar_t__ ldl(DUMMY_VAR__);
                                (void) ldl;  // dummy to suppress unused var warning
                                stan::math::initialize(ldl, DUMMY_VAR__);
                                stan::math::fill(ldl, DUMMY_VAR__);
                                current_statement_begin__ = 510;
                                local_scalar_t__ hba1c(DUMMY_VAR__);
                                (void) hba1c;  // dummy to suppress unused var warning
                                stan::math::initialize(hba1c, DUMMY_VAR__);
                                stan::math::fill(hba1c, DUMMY_VAR__);
                                current_statement_begin__ = 511;
                                local_scalar_t__ sbp(DUMMY_VAR__);
                                (void) sbp;  // dummy to suppress unused var warning
                                stan::math::initialize(sbp, DUMMY_VAR__);
                                stan::math::fill(sbp, DUMMY_VAR__);
                                current_statement_begin__ = 512;
                                local_scalar_t__ ihd(DUMMY_VAR__);
                                (void) ihd;  // dummy to suppress unused var warning
                                stan::math::initialize(ihd, DUMMY_VAR__);
                                stan::math::fill(ihd, DUMMY_VAR__);
                                current_statement_begin__ = 513;
                                local_scalar_t__ smoker(DUMMY_VAR__);
                                (void) smoker;  // dummy to suppress unused var warning
                                stan::math::initialize(smoker, DUMMY_VAR__);
                                stan::math::fill(smoker, DUMMY_VAR__);
                                current_statement_begin__ = 514;
                                local_scalar_t__ ro(DUMMY_VAR__);
                                (void) ro;  // dummy to suppress unused var warning
                                stan::math::initialize(ro, DUMMY_VAR__);
                                stan::math::fill(ro, DUMMY_VAR__);
                                current_statement_begin__ = 515;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 516;
                                stan::math::assign(intercept, normal_rng(-(8.708), 0.844, base_rng__));
                                current_statement_begin__ = 517;
                                stan::math::assign(ro, ro_rng(1.376, 0.097, base_rng__, pstream__));
                                current_statement_begin__ = 518;
                                stan::math::assign(hba1c, normal_rng(0.078, 0.030, base_rng__));
                                current_statement_begin__ = 519;
                                stan::math::assign(age_diab, normal_rng(0.041, 0.008, base_rng__));
                                current_statement_begin__ = 520;
                                stan::math::assign(ldl, normal_rng(0.035, 0.007, base_rng__));
                                current_statement_begin__ = 521;
                                stan::math::assign(chf, normal_rng(0.853, 0.200, base_rng__));
                                current_statement_begin__ = 522;
                                stan::math::assign(sbp, normal_rng(0.056, 0.027, base_rng__));
                                current_statement_begin__ = 523;
                                stan::math::assign(ihd, normal_rng(0.876, 0.163, base_rng__));
                                current_statement_begin__ = 524;
                                stan::math::assign(smoker, normal_rng(0.344, 0.138, base_rng__));
                                current_statement_begin__ = 525;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 526;
                                stan::math::assign(update, simMIf(update, intercept, ro, hba1c, age_diab, ldl, chf, sbp, smoker, ihd, rand, pstream__));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(update, 16, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 531;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 532;
                            local_scalar_t__ ldl(DUMMY_VAR__);
                            (void) ldl;  // dummy to suppress unused var warning
                            stan::math::initialize(ldl, DUMMY_VAR__);
                            stan::math::fill(ldl, DUMMY_VAR__);
                            current_statement_begin__ = 533;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 534;
                            stan::math::assign(intercept, normal_rng(-(4.179), 0.262, base_rng__));
                            current_statement_begin__ = 535;
                            stan::math::assign(ldl, normal_rng(0.021, 0.007, base_rng__));
                            current_statement_begin__ = 536;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 537;
                            stan::math::assign(update, simMI2(update, intercept, ldl, rand, pstream__));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 4))) {
                        current_statement_begin__ = 541;
                        if (as_bool(logical_eq(get_base1(update, 17, "update", 1), 0))) {
                            {
                            current_statement_begin__ = 542;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 543;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 544;
                            local_scalar_t__ ldl(DUMMY_VAR__);
                            (void) ldl;  // dummy to suppress unused var warning
                            stan::math::initialize(ldl, DUMMY_VAR__);
                            stan::math::fill(ldl, DUMMY_VAR__);
                            current_statement_begin__ = 545;
                            local_scalar_t__ hba1c(DUMMY_VAR__);
                            (void) hba1c;  // dummy to suppress unused var warning
                            stan::math::initialize(hba1c, DUMMY_VAR__);
                            stan::math::fill(hba1c, DUMMY_VAR__);
                            current_statement_begin__ = 546;
                            local_scalar_t__ sbp(DUMMY_VAR__);
                            (void) sbp;  // dummy to suppress unused var warning
                            stan::math::initialize(sbp, DUMMY_VAR__);
                            stan::math::fill(sbp, DUMMY_VAR__);
                            current_statement_begin__ = 547;
                            local_scalar_t__ ihd(DUMMY_VAR__);
                            (void) ihd;  // dummy to suppress unused var warning
                            stan::math::initialize(ihd, DUMMY_VAR__);
                            stan::math::fill(ihd, DUMMY_VAR__);
                            current_statement_begin__ = 548;
                            local_scalar_t__ smoker(DUMMY_VAR__);
                            (void) smoker;  // dummy to suppress unused var warning
                            stan::math::initialize(smoker, DUMMY_VAR__);
                            stan::math::fill(smoker, DUMMY_VAR__);
                            current_statement_begin__ = 549;
                            local_scalar_t__ ro(DUMMY_VAR__);
                            (void) ro;  // dummy to suppress unused var warning
                            stan::math::initialize(ro, DUMMY_VAR__);
                            stan::math::fill(ro, DUMMY_VAR__);
                            current_statement_begin__ = 550;
                            local_scalar_t__ female(DUMMY_VAR__);
                            (void) female;  // dummy to suppress unused var warning
                            stan::math::initialize(female, DUMMY_VAR__);
                            stan::math::fill(female, DUMMY_VAR__);
                            current_statement_begin__ = 551;
                            local_scalar_t__ amp(DUMMY_VAR__);
                            (void) amp;  // dummy to suppress unused var warning
                            stan::math::initialize(amp, DUMMY_VAR__);
                            stan::math::fill(amp, DUMMY_VAR__);
                            current_statement_begin__ = 552;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 553;
                            stan::math::assign(intercept, normal_rng(-(13.053), 0.722, base_rng__));
                            current_statement_begin__ = 554;
                            stan::math::assign(ro, ro_rng(1.466, 0.081, base_rng__, pstream__));
                            current_statement_begin__ = 555;
                            stan::math::assign(hba1c, normal_rng(0.092, 0.026, base_rng__));
                            current_statement_begin__ = 556;
                            stan::math::assign(age_diab, normal_rng(0.066, 0.007, base_rng__));
                            current_statement_begin__ = 557;
                            stan::math::assign(female, normal_rng(-(0.420), 0.098, base_rng__));
                            current_statement_begin__ = 558;
                            stan::math::assign(ldl, normal_rng(0.016, 0.004, base_rng__));
                            current_statement_begin__ = 559;
                            stan::math::assign(sbp, normal_rng(0.170, 0.022, base_rng__));
                            current_statement_begin__ = 560;
                            stan::math::assign(ihd, normal_rng(0.876, 0.163, base_rng__));
                            current_statement_begin__ = 561;
                            stan::math::assign(smoker, normal_rng(0.331, 0.111, base_rng__));
                            current_statement_begin__ = 562;
                            stan::math::assign(amp, normal_rng(1.090, 0.240, base_rng__));
                            current_statement_begin__ = 563;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 564;
                            stan::math::assign(update, simStroke(update, intercept, ro, hba1c, age_diab, ldl, sbp, smoker, ihd, female, amp, rand, pstream__));
                            }
                        } else if (as_bool(logical_eq(get_base1(update, 17, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 568;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 569;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 570;
                            local_scalar_t__ smoker(DUMMY_VAR__);
                            (void) smoker;  // dummy to suppress unused var warning
                            stan::math::initialize(smoker, DUMMY_VAR__);
                            stan::math::fill(smoker, DUMMY_VAR__);
                            current_statement_begin__ = 571;
                            local_scalar_t__ ro(DUMMY_VAR__);
                            (void) ro;  // dummy to suppress unused var warning
                            stan::math::initialize(ro, DUMMY_VAR__);
                            stan::math::fill(ro, DUMMY_VAR__);
                            current_statement_begin__ = 572;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 573;
                            stan::math::assign(intercept, normal_rng(-(9.431), 1.569, base_rng__));
                            current_statement_begin__ = 574;
                            stan::math::assign(ro, ro_rng(1.956, 0.291, base_rng__, pstream__));
                            current_statement_begin__ = 575;
                            stan::math::assign(age_diab, normal_rng(0.046, 0.018, base_rng__));
                            current_statement_begin__ = 576;
                            stan::math::assign(smoker, normal_rng(0.656, 0.263, base_rng__));
                            current_statement_begin__ = 577;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 578;
                            stan::math::assign(update, simStroke2(update, intercept, ro, age_diab, smoker, rand, pstream__));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 5))) {
                        current_statement_begin__ = 582;
                        if (as_bool(logical_neq(get_base1(update, 20, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 583;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 584;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 585;
                            local_scalar_t__ hba1c(DUMMY_VAR__);
                            (void) hba1c;  // dummy to suppress unused var warning
                            stan::math::initialize(hba1c, DUMMY_VAR__);
                            stan::math::fill(hba1c, DUMMY_VAR__);
                            current_statement_begin__ = 586;
                            local_scalar_t__ sbp(DUMMY_VAR__);
                            (void) sbp;  // dummy to suppress unused var warning
                            stan::math::initialize(sbp, DUMMY_VAR__);
                            stan::math::fill(sbp, DUMMY_VAR__);
                            current_statement_begin__ = 587;
                            local_scalar_t__ ihd(DUMMY_VAR__);
                            (void) ihd;  // dummy to suppress unused var warning
                            stan::math::initialize(ihd, DUMMY_VAR__);
                            stan::math::fill(ihd, DUMMY_VAR__);
                            current_statement_begin__ = 588;
                            local_scalar_t__ chf(DUMMY_VAR__);
                            (void) chf;  // dummy to suppress unused var warning
                            stan::math::initialize(chf, DUMMY_VAR__);
                            stan::math::fill(chf, DUMMY_VAR__);
                            current_statement_begin__ = 589;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 590;
                            stan::math::assign(intercept, normal_rng(-(11.607), 0.759, base_rng__));
                            current_statement_begin__ = 591;
                            stan::math::assign(hba1c, normal_rng(0.171, 0.032, base_rng__));
                            current_statement_begin__ = 592;
                            stan::math::assign(age_diab, normal_rng(0.047, 0.009, base_rng__));
                            current_statement_begin__ = 593;
                            stan::math::assign(sbp, normal_rng(0.068, 0.032, base_rng__));
                            current_statement_begin__ = 594;
                            stan::math::assign(ihd, normal_rng(0.610, 0.208, base_rng__));
                            current_statement_begin__ = 595;
                            stan::math::assign(chf, normal_rng(0.841, 0.287, base_rng__));
                            current_statement_begin__ = 596;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 597;
                            stan::math::assign(update, simBlind(update, intercept, age_diab, hba1c, sbp, chf, ihd, rand, pstream__));
                            }
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 6))) {
                        {
                        current_statement_begin__ = 602;
                        local_scalar_t__ intercept(DUMMY_VAR__);
                        (void) intercept;  // dummy to suppress unused var warning
                        stan::math::initialize(intercept, DUMMY_VAR__);
                        stan::math::fill(intercept, DUMMY_VAR__);
                        current_statement_begin__ = 603;
                        local_scalar_t__ age_diab(DUMMY_VAR__);
                        (void) age_diab;  // dummy to suppress unused var warning
                        stan::math::initialize(age_diab, DUMMY_VAR__);
                        stan::math::fill(age_diab, DUMMY_VAR__);
                        current_statement_begin__ = 604;
                        local_scalar_t__ female(DUMMY_VAR__);
                        (void) female;  // dummy to suppress unused var warning
                        stan::math::initialize(female, DUMMY_VAR__);
                        stan::math::fill(female, DUMMY_VAR__);
                        current_statement_begin__ = 605;
                        local_scalar_t__ bmi(DUMMY_VAR__);
                        (void) bmi;  // dummy to suppress unused var warning
                        stan::math::initialize(bmi, DUMMY_VAR__);
                        stan::math::fill(bmi, DUMMY_VAR__);
                        current_statement_begin__ = 606;
                        local_scalar_t__ hba1c(DUMMY_VAR__);
                        (void) hba1c;  // dummy to suppress unused var warning
                        stan::math::initialize(hba1c, DUMMY_VAR__);
                        stan::math::fill(hba1c, DUMMY_VAR__);
                        current_statement_begin__ = 607;
                        local_scalar_t__ rand(DUMMY_VAR__);
                        (void) rand;  // dummy to suppress unused var warning
                        stan::math::initialize(rand, DUMMY_VAR__);
                        stan::math::fill(rand, DUMMY_VAR__);
                        current_statement_begin__ = 608;
                        stan::math::assign(intercept, normal_rng(-(4.179), 0.262, base_rng__));
                        current_statement_begin__ = 609;
                        stan::math::assign(age_diab, normal_rng(0.021, 0.007, base_rng__));
                        current_statement_begin__ = 610;
                        stan::math::assign(female, normal_rng(0.021, 0.007, base_rng__));
                        current_statement_begin__ = 611;
                        stan::math::assign(bmi, normal_rng(0.021, 0.007, base_rng__));
                        current_statement_begin__ = 612;
                        stan::math::assign(hba1c, normal_rng(0.021, 0.007, base_rng__));
                        current_statement_begin__ = 613;
                        stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                        current_statement_begin__ = 614;
                        stan::math::assign(update, simUlcer(update, intercept, age_diab, female, bmi, hba1c, rand, pstream__));
                        }
                    } else if (as_bool(logical_eq(get_base1(order, s, "order", 1), 7))) {
                        current_statement_begin__ = 617;
                        if (as_bool(logical_eq(get_base1(update, 21, "update", 1), 0))) {
                            current_statement_begin__ = 618;
                            if (as_bool(logical_eq(get_base1(update, 15, "update", 1), 0))) {
                                {
                                current_statement_begin__ = 619;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 620;
                                local_scalar_t__ age_diab(DUMMY_VAR__);
                                (void) age_diab;  // dummy to suppress unused var warning
                                stan::math::initialize(age_diab, DUMMY_VAR__);
                                stan::math::fill(age_diab, DUMMY_VAR__);
                                current_statement_begin__ = 621;
                                local_scalar_t__ hdl(DUMMY_VAR__);
                                (void) hdl;  // dummy to suppress unused var warning
                                stan::math::initialize(hdl, DUMMY_VAR__);
                                stan::math::fill(hdl, DUMMY_VAR__);
                                current_statement_begin__ = 622;
                                local_scalar_t__ hba1c(DUMMY_VAR__);
                                (void) hba1c;  // dummy to suppress unused var warning
                                stan::math::initialize(hba1c, DUMMY_VAR__);
                                stan::math::fill(hba1c, DUMMY_VAR__);
                                current_statement_begin__ = 623;
                                local_scalar_t__ sbp(DUMMY_VAR__);
                                (void) sbp;  // dummy to suppress unused var warning
                                stan::math::initialize(sbp, DUMMY_VAR__);
                                stan::math::fill(sbp, DUMMY_VAR__);
                                current_statement_begin__ = 624;
                                local_scalar_t__ stroke(DUMMY_VAR__);
                                (void) stroke;  // dummy to suppress unused var warning
                                stan::math::initialize(stroke, DUMMY_VAR__);
                                stan::math::fill(stroke, DUMMY_VAR__);
                                current_statement_begin__ = 625;
                                local_scalar_t__ ro(DUMMY_VAR__);
                                (void) ro;  // dummy to suppress unused var warning
                                stan::math::initialize(ro, DUMMY_VAR__);
                                stan::math::fill(ro, DUMMY_VAR__);
                                current_statement_begin__ = 626;
                                local_scalar_t__ female(DUMMY_VAR__);
                                (void) female;  // dummy to suppress unused var warning
                                stan::math::initialize(female, DUMMY_VAR__);
                                stan::math::fill(female, DUMMY_VAR__);
                                current_statement_begin__ = 627;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 628;
                                stan::math::assign(intercept, normal_rng(-(14.844), 1.205, base_rng__));
                                current_statement_begin__ = 629;
                                stan::math::assign(ro, ro_rng(2.067, 0.193, base_rng__, pstream__));
                                current_statement_begin__ = 630;
                                stan::math::assign(hba1c, normal_rng(0.248, 0.042, base_rng__));
                                current_statement_begin__ = 631;
                                stan::math::assign(age_diab, normal_rng(0.023, 0.011, base_rng__));
                                current_statement_begin__ = 632;
                                stan::math::assign(female, normal_rng(-(0.445), 0.189, base_rng__));
                                current_statement_begin__ = 633;
                                stan::math::assign(hdl, normal_rng(-(0.059), 0.032, base_rng__));
                                current_statement_begin__ = 634;
                                stan::math::assign(sbp, normal_rng(0.086, 0.043, base_rng__));
                                current_statement_begin__ = 635;
                                stan::math::assign(stroke, normal_rng(1.299, 0.245, base_rng__));
                                current_statement_begin__ = 636;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 637;
                                stan::math::assign(update, simAmp_noUlcer(update, intercept, ro, hba1c, age_diab, hdl, sbp, stroke, female, rand, pstream__));
                                }
                            } else {
                                {
                                current_statement_begin__ = 641;
                                local_scalar_t__ intercept(DUMMY_VAR__);
                                (void) intercept;  // dummy to suppress unused var warning
                                stan::math::initialize(intercept, DUMMY_VAR__);
                                stan::math::fill(intercept, DUMMY_VAR__);
                                current_statement_begin__ = 642;
                                local_scalar_t__ age_diab(DUMMY_VAR__);
                                (void) age_diab;  // dummy to suppress unused var warning
                                stan::math::initialize(age_diab, DUMMY_VAR__);
                                stan::math::fill(age_diab, DUMMY_VAR__);
                                current_statement_begin__ = 643;
                                local_scalar_t__ rand(DUMMY_VAR__);
                                (void) rand;  // dummy to suppress unused var warning
                                stan::math::initialize(rand, DUMMY_VAR__);
                                stan::math::fill(rand, DUMMY_VAR__);
                                current_statement_begin__ = 644;
                                stan::math::assign(intercept, normal_rng(-(0.881), 1.390, base_rng__));
                                current_statement_begin__ = 645;
                                stan::math::assign(age_diab, normal_rng(-(0.065), 0.027, base_rng__));
                                current_statement_begin__ = 646;
                                stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                                current_statement_begin__ = 647;
                                stan::math::assign(update, simAmp_Ulcer(update, intercept, age_diab, rand, pstream__));
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(update, 15, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 651;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 652;
                            local_scalar_t__ hb1ac(DUMMY_VAR__);
                            (void) hb1ac;  // dummy to suppress unused var warning
                            stan::math::initialize(hb1ac, DUMMY_VAR__);
                            stan::math::fill(hb1ac, DUMMY_VAR__);
                            current_statement_begin__ = 653;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 654;
                            stan::math::assign(intercept, normal_rng(-(3.455), 0.565, base_rng__));
                            current_statement_begin__ = 655;
                            stan::math::assign(hb1ac, normal_rng(0.127, 0.060, base_rng__));
                            current_statement_begin__ = 656;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 657;
                            stan::math::assign(update, simAmp2(update, intercept, hb1ac, rand, pstream__));
                            }
                        }
                    } else {
                        current_statement_begin__ = 661;
                        if (as_bool(logical_neq(get_base1(update, 22, "update", 1), 1))) {
                            {
                            current_statement_begin__ = 662;
                            local_scalar_t__ intercept(DUMMY_VAR__);
                            (void) intercept;  // dummy to suppress unused var warning
                            stan::math::initialize(intercept, DUMMY_VAR__);
                            stan::math::fill(intercept, DUMMY_VAR__);
                            current_statement_begin__ = 663;
                            local_scalar_t__ age_diab(DUMMY_VAR__);
                            (void) age_diab;  // dummy to suppress unused var warning
                            stan::math::initialize(age_diab, DUMMY_VAR__);
                            stan::math::fill(age_diab, DUMMY_VAR__);
                            current_statement_begin__ = 664;
                            local_scalar_t__ female(DUMMY_VAR__);
                            (void) female;  // dummy to suppress unused var warning
                            stan::math::initialize(female, DUMMY_VAR__);
                            stan::math::fill(female, DUMMY_VAR__);
                            current_statement_begin__ = 665;
                            local_scalar_t__ bmi(DUMMY_VAR__);
                            (void) bmi;  // dummy to suppress unused var warning
                            stan::math::initialize(bmi, DUMMY_VAR__);
                            stan::math::fill(bmi, DUMMY_VAR__);
                            current_statement_begin__ = 666;
                            local_scalar_t__ ldl(DUMMY_VAR__);
                            (void) ldl;  // dummy to suppress unused var warning
                            stan::math::initialize(ldl, DUMMY_VAR__);
                            stan::math::fill(ldl, DUMMY_VAR__);
                            current_statement_begin__ = 667;
                            local_scalar_t__ sbp(DUMMY_VAR__);
                            (void) sbp;  // dummy to suppress unused var warning
                            stan::math::initialize(sbp, DUMMY_VAR__);
                            stan::math::fill(sbp, DUMMY_VAR__);
                            current_statement_begin__ = 668;
                            local_scalar_t__ amp(DUMMY_VAR__);
                            (void) amp;  // dummy to suppress unused var warning
                            stan::math::initialize(amp, DUMMY_VAR__);
                            stan::math::fill(amp, DUMMY_VAR__);
                            current_statement_begin__ = 669;
                            local_scalar_t__ blind(DUMMY_VAR__);
                            (void) blind;  // dummy to suppress unused var warning
                            stan::math::initialize(blind, DUMMY_VAR__);
                            stan::math::fill(blind, DUMMY_VAR__);
                            current_statement_begin__ = 670;
                            local_scalar_t__ efgr(DUMMY_VAR__);
                            (void) efgr;  // dummy to suppress unused var warning
                            stan::math::initialize(efgr, DUMMY_VAR__);
                            stan::math::fill(efgr, DUMMY_VAR__);
                            current_statement_begin__ = 671;
                            local_scalar_t__ rand(DUMMY_VAR__);
                            (void) rand;  // dummy to suppress unused var warning
                            stan::math::initialize(rand, DUMMY_VAR__);
                            stan::math::fill(rand, DUMMY_VAR__);
                            current_statement_begin__ = 672;
                            stan::math::assign(intercept, normal_rng(3.549, 1.480, base_rng__));
                            current_statement_begin__ = 673;
                            stan::math::assign(age_diab, normal_rng(-(0.029), 0.013, base_rng__));
                            current_statement_begin__ = 674;
                            stan::math::assign(female, normal_rng(-(0.869), 0.224, base_rng__));
                            current_statement_begin__ = 675;
                            stan::math::assign(bmi, normal_rng(-(0.054), 0.020, base_rng__));
                            current_statement_begin__ = 676;
                            stan::math::assign(ldl, normal_rng(0.027, 0.007, base_rng__));
                            current_statement_begin__ = 677;
                            stan::math::assign(sbp, normal_rng(0.085, 0.047, base_rng__));
                            current_statement_begin__ = 678;
                            stan::math::assign(amp, normal_rng(1.108, 0.337, base_rng__));
                            current_statement_begin__ = 679;
                            stan::math::assign(blind, normal_rng(0.732, 0.290, base_rng__));
                            current_statement_begin__ = 680;
                            stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                            current_statement_begin__ = 681;
                            if (as_bool(logical_lte(get_base1(update, 33, "update", 1), 60))) {
                                current_statement_begin__ = 682;
                                stan::math::assign(efgr, normal_rng(-(1.031), 0.085, base_rng__));
                            } else {
                                current_statement_begin__ = 684;
                                stan::math::assign(efgr, normal_rng(-(0.487), 0.136, base_rng__));
                            }
                            current_statement_begin__ = 685;
                            stan::math::assign(update, simRenal(update, intercept, age_diab, female, bmi, ldl, sbp, amp, efgr, blind, rand, pstream__));
                            }
                        }
                    }
                }
                current_statement_begin__ = 690;
                if (as_bool(logical_gte(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(24, 31), stan::model::nil_index_list()), "update")), 1))) {
                    current_statement_begin__ = 691;
                    stan::math::assign(primera, (primera + 1));
                }
                current_statement_begin__ = 692;
                if (as_bool((primitive_value(logical_eq(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(15, 22), stan::model::nil_index_list()), "update")), 0)) && primitive_value(logical_eq(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(24, 31), stan::model::nil_index_list()), "update")), 0))))) {
                    {
                    current_statement_begin__ = 693;
                    local_scalar_t__ intercept(DUMMY_VAR__);
                    (void) intercept;  // dummy to suppress unused var warning
                    stan::math::initialize(intercept, DUMMY_VAR__);
                    stan::math::fill(intercept, DUMMY_VAR__);
                    current_statement_begin__ = 694;
                    local_scalar_t__ phi(DUMMY_VAR__);
                    (void) phi;  // dummy to suppress unused var warning
                    stan::math::initialize(phi, DUMMY_VAR__);
                    stan::math::fill(phi, DUMMY_VAR__);
                    current_statement_begin__ = 695;
                    local_scalar_t__ female(DUMMY_VAR__);
                    (void) female;  // dummy to suppress unused var warning
                    stan::math::initialize(female, DUMMY_VAR__);
                    stan::math::fill(female, DUMMY_VAR__);
                    current_statement_begin__ = 696;
                    local_scalar_t__ smoker(DUMMY_VAR__);
                    (void) smoker;  // dummy to suppress unused var warning
                    stan::math::initialize(smoker, DUMMY_VAR__);
                    stan::math::fill(smoker, DUMMY_VAR__);
                    current_statement_begin__ = 697;
                    local_scalar_t__ rand(DUMMY_VAR__);
                    (void) rand;  // dummy to suppress unused var warning
                    stan::math::initialize(rand, DUMMY_VAR__);
                    stan::math::fill(rand, DUMMY_VAR__);
                    current_statement_begin__ = 698;
                    stan::math::assign(intercept, normal_rng(-(10.908), 0.304, base_rng__));
                    current_statement_begin__ = 699;
                    stan::math::assign(phi, ro_rng(0.098, 0.004, base_rng__, pstream__));
                    current_statement_begin__ = 700;
                    stan::math::assign(female, normal_rng(-(0.229), 0.077, base_rng__));
                    current_statement_begin__ = 701;
                    stan::math::assign(smoker, normal_rng(0.379, 0.089, base_rng__));
                    current_statement_begin__ = 702;
                    stan::math::assign(update, simDeath_nohist(update, intercept, phi, female, smoker, rand, pstream__));
                    }
                } else if (as_bool(logical_eq(primera, 1))) {
                    {
                    current_statement_begin__ = 705;
                    local_scalar_t__ intercept(DUMMY_VAR__);
                    (void) intercept;  // dummy to suppress unused var warning
                    stan::math::initialize(intercept, DUMMY_VAR__);
                    stan::math::fill(intercept, DUMMY_VAR__);
                    current_statement_begin__ = 706;
                    local_scalar_t__ year(DUMMY_VAR__);
                    (void) year;  // dummy to suppress unused var warning
                    stan::math::initialize(year, DUMMY_VAR__);
                    stan::math::fill(year, DUMMY_VAR__);
                    current_statement_begin__ = 707;
                    local_scalar_t__ age(DUMMY_VAR__);
                    (void) age;  // dummy to suppress unused var warning
                    stan::math::initialize(age, DUMMY_VAR__);
                    stan::math::fill(age, DUMMY_VAR__);
                    current_statement_begin__ = 708;
                    local_scalar_t__ smoker(DUMMY_VAR__);
                    (void) smoker;  // dummy to suppress unused var warning
                    stan::math::initialize(smoker, DUMMY_VAR__);
                    stan::math::fill(smoker, DUMMY_VAR__);
                    current_statement_begin__ = 709;
                    local_scalar_t__ amp_event(DUMMY_VAR__);
                    (void) amp_event;  // dummy to suppress unused var warning
                    stan::math::initialize(amp_event, DUMMY_VAR__);
                    stan::math::fill(amp_event, DUMMY_VAR__);
                    current_statement_begin__ = 710;
                    local_scalar_t__ ihd_event(DUMMY_VAR__);
                    (void) ihd_event;  // dummy to suppress unused var warning
                    stan::math::initialize(ihd_event, DUMMY_VAR__);
                    stan::math::fill(ihd_event, DUMMY_VAR__);
                    current_statement_begin__ = 711;
                    local_scalar_t__ mi_event(DUMMY_VAR__);
                    (void) mi_event;  // dummy to suppress unused var warning
                    stan::math::initialize(mi_event, DUMMY_VAR__);
                    stan::math::fill(mi_event, DUMMY_VAR__);
                    current_statement_begin__ = 712;
                    local_scalar_t__ renal_event(DUMMY_VAR__);
                    (void) renal_event;  // dummy to suppress unused var warning
                    stan::math::initialize(renal_event, DUMMY_VAR__);
                    stan::math::fill(renal_event, DUMMY_VAR__);
                    current_statement_begin__ = 713;
                    local_scalar_t__ stroke_event(DUMMY_VAR__);
                    (void) stroke_event;  // dummy to suppress unused var warning
                    stan::math::initialize(stroke_event, DUMMY_VAR__);
                    stan::math::fill(stroke_event, DUMMY_VAR__);
                    current_statement_begin__ = 714;
                    local_scalar_t__ rand(DUMMY_VAR__);
                    (void) rand;  // dummy to suppress unused var warning
                    stan::math::initialize(rand, DUMMY_VAR__);
                    stan::math::fill(rand, DUMMY_VAR__);
                    current_statement_begin__ = 715;
                    stan::math::assign(intercept, normal_rng(-(6.916), 0.591, base_rng__));
                    current_statement_begin__ = 716;
                    stan::math::assign(year, normal_rng(0.042, 0.010, base_rng__));
                    current_statement_begin__ = 717;
                    stan::math::assign(age, normal_rng(0.058, 0.007, base_rng__));
                    current_statement_begin__ = 718;
                    stan::math::assign(smoker, normal_rng(0.444, 0.117, base_rng__));
                    current_statement_begin__ = 719;
                    stan::math::assign(amp_event, normal_rng(-(0.734), 0.321, base_rng__));
                    current_statement_begin__ = 720;
                    stan::math::assign(ihd_event, normal_rng(0.423, 0.168, base_rng__));
                    current_statement_begin__ = 721;
                    stan::math::assign(mi_event, normal_rng(1.309, 0.158, base_rng__));
                    current_statement_begin__ = 722;
                    stan::math::assign(renal_event, normal_rng(0.584, 0.305, base_rng__));
                    current_statement_begin__ = 723;
                    stan::math::assign(stroke_event, normal_rng(0.547, 0.176, base_rng__));
                    current_statement_begin__ = 724;
                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                    current_statement_begin__ = 725;
                    stan::math::assign(update, simDeath1st(update, intercept, year, age, smoker, amp_event, ihd_event, mi_event, renal_event, stroke_event, rand, pstream__));
                    }
                } else if (as_bool(logical_gte(sum(stan::model::rvalue(update, stan::model::cons_list(stan::model::index_min_max(15, 22), stan::model::nil_index_list()), "update")), 1))) {
                    {
                    current_statement_begin__ = 729;
                    local_scalar_t__ intercept(DUMMY_VAR__);
                    (void) intercept;  // dummy to suppress unused var warning
                    stan::math::initialize(intercept, DUMMY_VAR__);
                    stan::math::fill(intercept, DUMMY_VAR__);
                    current_statement_begin__ = 730;
                    local_scalar_t__ phi(DUMMY_VAR__);
                    (void) phi;  // dummy to suppress unused var warning
                    stan::math::initialize(phi, DUMMY_VAR__);
                    stan::math::fill(phi, DUMMY_VAR__);
                    current_statement_begin__ = 731;
                    local_scalar_t__ bm1(DUMMY_VAR__);
                    (void) bm1;  // dummy to suppress unused var warning
                    stan::math::initialize(bm1, DUMMY_VAR__);
                    stan::math::fill(bm1, DUMMY_VAR__);
                    current_statement_begin__ = 732;
                    local_scalar_t__ bm2(DUMMY_VAR__);
                    (void) bm2;  // dummy to suppress unused var warning
                    stan::math::initialize(bm2, DUMMY_VAR__);
                    stan::math::fill(bm2, DUMMY_VAR__);
                    current_statement_begin__ = 733;
                    local_scalar_t__ smoker(DUMMY_VAR__);
                    (void) smoker;  // dummy to suppress unused var warning
                    stan::math::initialize(smoker, DUMMY_VAR__);
                    stan::math::fill(smoker, DUMMY_VAR__);
                    current_statement_begin__ = 734;
                    local_scalar_t__ amp(DUMMY_VAR__);
                    (void) amp;  // dummy to suppress unused var warning
                    stan::math::initialize(amp, DUMMY_VAR__);
                    stan::math::fill(amp, DUMMY_VAR__);
                    current_statement_begin__ = 735;
                    local_scalar_t__ chf(DUMMY_VAR__);
                    (void) chf;  // dummy to suppress unused var warning
                    stan::math::initialize(chf, DUMMY_VAR__);
                    stan::math::fill(chf, DUMMY_VAR__);
                    current_statement_begin__ = 736;
                    local_scalar_t__ renal(DUMMY_VAR__);
                    (void) renal;  // dummy to suppress unused var warning
                    stan::math::initialize(renal, DUMMY_VAR__);
                    stan::math::fill(renal, DUMMY_VAR__);
                    current_statement_begin__ = 737;
                    local_scalar_t__ stroke(DUMMY_VAR__);
                    (void) stroke;  // dummy to suppress unused var warning
                    stan::math::initialize(stroke, DUMMY_VAR__);
                    stan::math::fill(stroke, DUMMY_VAR__);
                    current_statement_begin__ = 738;
                    local_scalar_t__ rand(DUMMY_VAR__);
                    (void) rand;  // dummy to suppress unused var warning
                    stan::math::initialize(rand, DUMMY_VAR__);
                    stan::math::fill(rand, DUMMY_VAR__);
                    current_statement_begin__ = 739;
                    stan::math::assign(intercept, normal_rng(-(9.207), 0.591, base_rng__));
                    current_statement_begin__ = 740;
                    stan::math::assign(phi, ro_rng(0.073, 0.007, base_rng__, pstream__));
                    current_statement_begin__ = 741;
                    stan::math::assign(bm1, normal_rng(1.083, 0.511, base_rng__));
                    current_statement_begin__ = 742;
                    stan::math::assign(bm2, normal_rng(-(0.293), 0.114, base_rng__));
                    current_statement_begin__ = 743;
                    stan::math::assign(smoker, normal_rng(0.374, 0.133, base_rng__));
                    current_statement_begin__ = 744;
                    stan::math::assign(amp, normal_rng(0.539, 0.198, base_rng__));
                    current_statement_begin__ = 745;
                    stan::math::assign(chf, normal_rng(0.632, 0.130, base_rng__));
                    current_statement_begin__ = 746;
                    stan::math::assign(renal, normal_rng(1.150, 0.197, base_rng__));
                    current_statement_begin__ = 747;
                    stan::math::assign(stroke, normal_rng(0.473, 0.122, base_rng__));
                    current_statement_begin__ = 748;
                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                    current_statement_begin__ = 749;
                    stan::math::assign(update, simDeath_hist(update, intercept, phi, bm1, bm2, smoker, amp, chf, renal, stroke, rand, pstream__));
                    }
                } else {
                    {
                    current_statement_begin__ = 753;
                    local_scalar_t__ intercept(DUMMY_VAR__);
                    (void) intercept;  // dummy to suppress unused var warning
                    stan::math::initialize(intercept, DUMMY_VAR__);
                    stan::math::fill(intercept, DUMMY_VAR__);
                    current_statement_begin__ = 754;
                    local_scalar_t__ age(DUMMY_VAR__);
                    (void) age;  // dummy to suppress unused var warning
                    stan::math::initialize(age, DUMMY_VAR__);
                    stan::math::fill(age, DUMMY_VAR__);
                    current_statement_begin__ = 755;
                    local_scalar_t__ hdl(DUMMY_VAR__);
                    (void) hdl;  // dummy to suppress unused var warning
                    stan::math::initialize(hdl, DUMMY_VAR__);
                    stan::math::fill(hdl, DUMMY_VAR__);
                    current_statement_begin__ = 756;
                    local_scalar_t__ amp_event(DUMMY_VAR__);
                    (void) amp_event;  // dummy to suppress unused var warning
                    stan::math::initialize(amp_event, DUMMY_VAR__);
                    stan::math::fill(amp_event, DUMMY_VAR__);
                    current_statement_begin__ = 757;
                    local_scalar_t__ amp(DUMMY_VAR__);
                    (void) amp;  // dummy to suppress unused var warning
                    stan::math::initialize(amp, DUMMY_VAR__);
                    stan::math::fill(amp, DUMMY_VAR__);
                    current_statement_begin__ = 758;
                    local_scalar_t__ amp_event2(DUMMY_VAR__);
                    (void) amp_event2;  // dummy to suppress unused var warning
                    stan::math::initialize(amp_event2, DUMMY_VAR__);
                    stan::math::fill(amp_event2, DUMMY_VAR__);
                    current_statement_begin__ = 759;
                    local_scalar_t__ ihd_event(DUMMY_VAR__);
                    (void) ihd_event;  // dummy to suppress unused var warning
                    stan::math::initialize(ihd_event, DUMMY_VAR__);
                    stan::math::fill(ihd_event, DUMMY_VAR__);
                    current_statement_begin__ = 760;
                    local_scalar_t__ ihd(DUMMY_VAR__);
                    (void) ihd;  // dummy to suppress unused var warning
                    stan::math::initialize(ihd, DUMMY_VAR__);
                    stan::math::fill(ihd, DUMMY_VAR__);
                    current_statement_begin__ = 761;
                    local_scalar_t__ mi_event(DUMMY_VAR__);
                    (void) mi_event;  // dummy to suppress unused var warning
                    stan::math::initialize(mi_event, DUMMY_VAR__);
                    stan::math::fill(mi_event, DUMMY_VAR__);
                    current_statement_begin__ = 762;
                    local_scalar_t__ mi(DUMMY_VAR__);
                    (void) mi;  // dummy to suppress unused var warning
                    stan::math::initialize(mi, DUMMY_VAR__);
                    stan::math::fill(mi, DUMMY_VAR__);
                    current_statement_begin__ = 763;
                    local_scalar_t__ renal(DUMMY_VAR__);
                    (void) renal;  // dummy to suppress unused var warning
                    stan::math::initialize(renal, DUMMY_VAR__);
                    stan::math::fill(renal, DUMMY_VAR__);
                    current_statement_begin__ = 764;
                    local_scalar_t__ stroke_event(DUMMY_VAR__);
                    (void) stroke_event;  // dummy to suppress unused var warning
                    stan::math::initialize(stroke_event, DUMMY_VAR__);
                    stan::math::fill(stroke_event, DUMMY_VAR__);
                    current_statement_begin__ = 765;
                    local_scalar_t__ rand(DUMMY_VAR__);
                    (void) rand;  // dummy to suppress unused var warning
                    stan::math::initialize(rand, DUMMY_VAR__);
                    stan::math::fill(rand, DUMMY_VAR__);
                    current_statement_begin__ = 766;
                    stan::math::assign(intercept, normal_rng(-(4.868), 0.828, base_rng__));
                    current_statement_begin__ = 767;
                    stan::math::assign(age, normal_rng(0.050, 0.010, base_rng__));
                    current_statement_begin__ = 768;
                    stan::math::assign(hdl, normal_rng(0.068, 0.030, base_rng__));
                    current_statement_begin__ = 769;
                    stan::math::assign(amp_event, normal_rng(-(1.267), 0.344, base_rng__));
                    current_statement_begin__ = 770;
                    stan::math::assign(amp, normal_rng(0.753, 0.300, base_rng__));
                    current_statement_begin__ = 771;
                    stan::math::assign(amp_event2, normal_rng(-(1.727), 0.467, base_rng__));
                    current_statement_begin__ = 772;
                    stan::math::assign(ihd_event, normal_rng(0.583, 0.243, base_rng__));
                    current_statement_begin__ = 773;
                    stan::math::assign(ihd, normal_rng(-(0.507), 0.191, base_rng__));
                    current_statement_begin__ = 774;
                    stan::math::assign(mi_event, normal_rng(0.982, 0.230, base_rng__));
                    current_statement_begin__ = 775;
                    stan::math::assign(mi, normal_rng(0.440, 0.186, base_rng__));
                    current_statement_begin__ = 776;
                    stan::math::assign(renal, normal_rng(0.961, 0.396, base_rng__));
                    current_statement_begin__ = 777;
                    stan::math::assign(stroke_event, normal_rng(-(0.619), 0.246, base_rng__));
                    current_statement_begin__ = 778;
                    stan::math::assign(rand, uniform_rng(0, 1, base_rng__));
                    current_statement_begin__ = 779;
                    stan::math::assign(update, simDeath_sub(update, intercept, age, hdl, amp_event, amp, amp_event2, ihd_event, ihd, mi_event, mi, renal, stroke_event, rand, pstream__));
                    }
                }
                current_statement_begin__ = 782;
                if (as_bool(logical_neq(get_base1(update, 23, "update", 1), 0))) {
                    {
                    current_statement_begin__ = 783;
                    local_scalar_t__ hba1c_red1_comp1(DUMMY_VAR__);
                    (void) hba1c_red1_comp1;  // dummy to suppress unused var warning
                    stan::math::initialize(hba1c_red1_comp1, DUMMY_VAR__);
                    stan::math::fill(hba1c_red1_comp1, DUMMY_VAR__);
                    current_statement_begin__ = 784;
                    local_scalar_t__ weight_red1_comp1(DUMMY_VAR__);
                    (void) weight_red1_comp1;  // dummy to suppress unused var warning
                    stan::math::initialize(weight_red1_comp1, DUMMY_VAR__);
                    stan::math::fill(weight_red1_comp1, DUMMY_VAR__);
                    current_statement_begin__ = 785;
                    local_scalar_t__ ldl_red1_comp1(DUMMY_VAR__);
                    (void) ldl_red1_comp1;  // dummy to suppress unused var warning
                    stan::math::initialize(ldl_red1_comp1, DUMMY_VAR__);
                    stan::math::fill(ldl_red1_comp1, DUMMY_VAR__);
                    current_statement_begin__ = 786;
                    local_scalar_t__ hdl_red1_comp1(DUMMY_VAR__);
                    (void) hdl_red1_comp1;  // dummy to suppress unused var warning
                    stan::math::initialize(hdl_red1_comp1, DUMMY_VAR__);
                    stan::math::fill(hdl_red1_comp1, DUMMY_VAR__);
                    current_statement_begin__ = 787;
                    local_scalar_t__ hba1c_red1(DUMMY_VAR__);
                    (void) hba1c_red1;  // dummy to suppress unused var warning
                    stan::math::initialize(hba1c_red1, DUMMY_VAR__);
                    stan::math::fill(hba1c_red1, DUMMY_VAR__);
                    current_statement_begin__ = 788;
                    local_scalar_t__ weight_red1(DUMMY_VAR__);
                    (void) weight_red1;  // dummy to suppress unused var warning
                    stan::math::initialize(weight_red1, DUMMY_VAR__);
                    stan::math::fill(weight_red1, DUMMY_VAR__);
                    current_statement_begin__ = 789;
                    local_scalar_t__ ldl_red1(DUMMY_VAR__);
                    (void) ldl_red1;  // dummy to suppress unused var warning
                    stan::math::initialize(ldl_red1, DUMMY_VAR__);
                    stan::math::fill(ldl_red1, DUMMY_VAR__);
                    current_statement_begin__ = 790;
                    local_scalar_t__ hdl_red1(DUMMY_VAR__);
                    (void) hdl_red1;  // dummy to suppress unused var warning
                    stan::math::initialize(hdl_red1, DUMMY_VAR__);
                    stan::math::fill(hdl_red1, DUMMY_VAR__);
                    current_statement_begin__ = 791;
                    local_scalar_t__ sbp_red1_comp1(DUMMY_VAR__);
                    (void) sbp_red1_comp1;  // dummy to suppress unused var warning
                    stan::math::initialize(sbp_red1_comp1, DUMMY_VAR__);
                    stan::math::fill(sbp_red1_comp1, DUMMY_VAR__);
                    current_statement_begin__ = 792;
                    local_scalar_t__ sbp_red1(DUMMY_VAR__);
                    (void) sbp_red1;  // dummy to suppress unused var warning
                    stan::math::initialize(sbp_red1, DUMMY_VAR__);
                    stan::math::fill(sbp_red1, DUMMY_VAR__);
                    current_statement_begin__ = 794;
                    stan::math::assign(hba1c_red1_comp1, normal_rng(hba1c_red1_comp1_mean, hba1c_red1_comp1_se, base_rng__));
                    current_statement_begin__ = 795;
                    stan::math::assign(weight_red1_comp1, normal_rng(weight_red1_comp1_mean, weight_red1_comp1_se, base_rng__));
                    current_statement_begin__ = 796;
                    stan::math::assign(ldl_red1_comp1, normal_rng(ldl_red1_comp1_mean, ldl_red1_comp1_se, base_rng__));
                    current_statement_begin__ = 797;
                    stan::math::assign(hdl_red1_comp1, normal_rng(hdl_red1_comp1_mean, hdl_red1_comp1_se, base_rng__));
                    current_statement_begin__ = 798;
                    stan::math::assign(sbp_red1_comp1, normal_rng(t_sbp_red1_comp1_mean, t_sbp_red1_comp1_se, base_rng__));
                    current_statement_begin__ = 806;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(7), stan::model::nil_index_list()), 
                                (get_base1(history, 7, "history", 1) + hba1c_red1_comp1), 
                                "assigning variable update");
                    current_statement_begin__ = 807;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(10), stan::model::nil_index_list()), 
                                (get_base1(history, 10, "history", 1) + weight_red1_comp1), 
                                "assigning variable update");
                    current_statement_begin__ = 808;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(8), stan::model::nil_index_list()), 
                                (get_base1(history, 8, "history", 1) + ldl_red1_comp1), 
                                "assigning variable update");
                    current_statement_begin__ = 809;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(9), stan::model::nil_index_list()), 
                                (get_base1(history, 9, "history", 1) + hdl_red1_comp1), 
                                "assigning variable update");
                    current_statement_begin__ = 810;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(14), stan::model::nil_index_list()), 
                                (get_base1(history, 14, "history", 1) + sbp_red1_comp1), 
                                "assigning variable update");
                    current_statement_begin__ = 811;
                    stan::model::assign(update, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                (stan::model::rvalue(update, stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), "update") + 1), 
                                "assigning variable update");
                    }
                }
                current_statement_begin__ = 813;
                stan::model::assign(mat_temp, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            update, 
                            "assigning variable mat_temp");
                current_statement_begin__ = 814;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(24), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 815;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(25), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 816;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(26), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 817;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(27), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 818;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(28), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 819;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(29), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 820;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(30), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                current_statement_begin__ = 821;
                stan::model::assign(update, 
                            stan::model::cons_list(stan::model::index_uni(31), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable update");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 397;
            size_t mat_temp_k_0_max__ = time;
            size_t mat_temp_k_1_max__ = len_his;
            for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                    vars__.push_back(mat_temp[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 398;
            size_t order_k_0_max__ = complicaciones;
            for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
                vars__.push_back(order[k_0__]);
            }
            current_statement_begin__ = 399;
            stan::math::check_simplex(function__, "theta", theta);
            size_t theta_j_1_max__ = complicaciones;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                vars__.push_back(theta(j_1__));
            }
            current_statement_begin__ = 400;
            size_t history_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
                vars__.push_back(history[k_0__]);
            }
            current_statement_begin__ = 401;
            size_t update_k_0_max__ = len_his;
            for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
                vars__.push_back(update[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_diabetes";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mat_temp_k_0_max__ = time;
        size_t mat_temp_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t order_k_0_max__ = complicaciones;
        for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "order" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = complicaciones;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t update_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "update" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mat_temp_k_0_max__ = time;
        size_t mat_temp_k_1_max__ = len_his;
        for (size_t k_1__ = 0; k_1__ < mat_temp_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < mat_temp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mat_temp" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t order_k_0_max__ = complicaciones;
        for (size_t k_0__ = 0; k_0__ < order_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "order" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = (complicaciones - 1);
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t history_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < history_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "history" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t update_k_0_max__ = len_his;
        for (size_t k_0__ = 0; k_0__ < update_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "update" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_diabetes_namespace::model_diabetes stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
